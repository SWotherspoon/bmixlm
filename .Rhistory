library(ggplot2)
ggplot(data.frame(component=factor(rep(c("1","2","observed"),each=n)),
y=c(y1,y2,d$y)),
aes(x=y,group=component,colour=component))+
geom_density()
## Take a burnin sample
library(bmixlm)
fit <- bmixlm(y~a+b+c,y~c+d+e,~f+g,data=d,nsamp=100)
library(bmixlm)
set.seed(31)
n <- 1000
d <- as.data.frame(matrix(runif(n*7),n,7))
colnames(d) <- letters[seq_along(d)]
## Generate responses from the two models
sigma <- c(0.3,0.5)
beta1 <- c(runif(1,-0.4,0.4),rnorm(3))
y1 <- model.matrix(~a+b+c,d)%*%beta1+rnorm(n,0,sigma[1])
beta2 <- c(runif(1,-0.4,0.4),rnorm(3))
y2 <- model.matrix(~c+d+e,d)%*%beta2+rnorm(n,0,sigma[2])
## Draw the observed response from one model or the other
betap <- c(0,1,-1)
p <- pnorm(model.matrix(~f+g,d)%*%betap)
b <- rbinom(n,1,p)
d$y <- ifelse(b==0,y1,y2)
library(ggplot2)
ggplot(data.frame(component=factor(rep(c("1","2","observed"),each=n)),
y=c(y1,y2,d$y)),
aes(x=y,group=component,colour=component))+
geom_density()
## Take a burnin sample
library(bmixlm)
fit <- bmixlm(y~a+b+c,y~c+d+e,~f+g,data=d,nsamp=100)
## Traceplots
plot(fit,which="comp1")
plot(fit,which="comp2")
plot(fit,which="probit")
plot(fit,which="error")
## Draw a larger sample
fit <- update(fit,nsamp=2000)
summary(fit)
## Traceplots
plot(fit,which="comp1")
plot(fit,which="comp2")
plot(fit,which="probit")
plot(fit,which="error")
d.pr <- predictAll(fit)
head(d.pr)
## Residuals vs fitted values
d.rf <- data.frame(component=rep(1:2,each=nrow(d.pr)),
fitted=c(d.pr$y1,d.pr$y2),
residual=c(d.pr$r1,d.pr$r2),
prob=c(1-d.pr$q,d.pr$q))
library(ggplot2)
ggplot(d.rf[order(d.rf$prob),],
aes(x=fitted,y=residual,colour=prob)) +
geom_point(size=1)+
facet_wrap(~component,ncol=1)
pairs(rbind(coef(fit,which="comp1",type="samples"),
coef(fit,which="comp1",type="mean"),
beta1),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="comp1")
pairs(rbind(coef(fit,which="comp2",type="samples"),
coef(fit,which="comp2",type="mean"),
beta2),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="comp2")
pairs(rbind(coef(fit,which="probit",type="samples"),
coef(fit,which="probit",type="mean"),
betap),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="probit")
pairs(rbind(coef(fit,which="error",type="samples"),
coef(fit,which="error",type="mean"),
sigma),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="error")
library(ggplot2)
ggplot(data.frame(comp=factor(b+1),prob=d.pr$q),
aes(x=prob,group=comp,colour=comp))+
geom_density()+
xlab("Pr comp 2")
## Fit a simple two component mixture
fit0 <- bmixlm(y~1,y~1,~1,data=d,nsamp=100)
fit0 <- update(fit0,nsamp=2000)
summary(fit0)
ys <- simulate(fit,nsim=100)
head(ys)
apply(ys,2,quantile,prob=c(0.025,0.5,0.975))
apply(ys,1,quantile,prob=c(0.025,0.5,0.975))
t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975)))
as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
head(d.pr)
d.pr <-d.pr[order(d.pr$`50%`),]
ys <- simulate(fit,nsim=100)
d.pr <- cbind(d$y,as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975)))))
d.pr <-d.pr[order(d.pr$`50%`),]
library(ggplot2)
ggplot(d.pr,aes(y=`y`,lower=`2.5%`,upper=`97.5%`))+
geom_ribbon()+
geom_point()
ys <- simulate(fit,nsim=100)
d.pr <- cbind(y=d$y,as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975)))))
d.pr <-d.pr[order(d.pr$`50%`),]
library(ggplot2)
ggplot(d.pr,aes(y=y,lower=`2.5%`,upper=`97.5%`))+
geom_ribbon()+
geom_point()
ys <- simulate(fit,nsim=100)
d.pr <- d$y,as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=y,x=order(d.pr$`50%`))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,lower=`2.5%`,upper=`97.5%`))+
geom_ribbon()+
geom_point()
head(d.pr)
d.pr <- d$y,as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=y,x=order(d.pr$`50%`))
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=y,x=order(d.pr$`50%`))
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(d.pr$`50%`))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,lower=`2.5%`,upper=`97.5%`))+
geom_ribbon()+
geom_point()
ys <- simulate(fit,nsim=100)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(d.pr$`50%`))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`))+
geom_ribbon()+
geom_point()
ys <- simulate(fit,nsim=100)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`))+
geom_ribbon()+
geom_point()
ys <- simulate(fit,nsim=100)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`))+
geom_ribbon(fill="grey80")+
geom_point()
ys <- simulate(fit,nsim=100)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`))+
geom_ribbon(fill="grey80")+
geom_point(size=1)
ys <- simulate(fit,nsim=500)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`))+
geom_ribbon(fill="grey80")+
geom_point(size=1)
classify(fit)
classify(fit)$q
cl <- classify(fit)
ys <- simulate(fit,nsim=500)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)),prob=max(cl$q,1-cl$q))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`,colour=prob))+
geom_ribbon(fill="grey80")+
geom_point(size=1)
plot(q)
plot(cl$q)
plot(max(cl$q,1-cl$q))
cl <- classify(fit)
ys <- simulate(fit,nsim=500)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)),prob=pmax(cl$q,1-cl$q))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`,colour=prob))+
geom_ribbon(fill="grey80")+
geom_point(size=1)
cl <- classify(fit)
ys <- simulate(fit,nsim=500)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)),prob=pmax(cl$q,1-cl$q))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`,colour=prob))+
geom_ribbon(col="grey80",fill="grey80")+
geom_point(size=1)
library(bmixlm)
ys <- simulate(fit0,nsim=500)
cl <- classify(fit)
d.pr <- as.data.frame(t(apply(ys,1,quantile,prob=c(0.025,0.5,0.975))))
d.pr <-cbind(d.pr,y=d$y,x=order(order(d.pr$`50%`)),cert=pmax(cl$q,1-cl$q))
library(ggplot2)
ggplot(d.pr,aes(x=x,y=y,ymin=`2.5%`,ymax=`97.5%`,colour=cert))+
geom_ribbon(col="grey80",fill="grey80")+
geom_point(size=1)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
library(bmixlm)
## Generate 7 uniformly distributed covariates
set.seed(31)
d <- as.data.frame(matrix(runif(1000*7),1000,7))
colnames(d) <- letters[seq_along(d)]
## Generate responses from the two models
sigma <- c(0.3,0.5)
beta1 <- c(runif(1,-0.4,0.4),rnorm(3))
y1 <- model.matrix(~a+b+c,d)%*%beta1+rnorm(nrow(d),0,sigma[1])
beta2 <- c(runif(1,-0.4,0.4),rnorm(3))
y2 <- model.matrix(~c+d+e,d)%*%beta2+rnorm(nrow(d),0,sigma[2])
## Draw the observed response from one model or the other
betap <- c(0,1,-1)
p <- pnorm(model.matrix(~f+g,d)%*%betap)
b <- rbinom(nrow(d),1,p)
d$y <- ifelse(b==0,y1,y2)
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(component=factor(rep(c("1","2","observed"),each=n)),
y=c(y1,y2,d$y)),
aes(x=y,group=component,colour=component))+
geom_density()
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(component=factor(rep(c("1","2","observed"),each=nrow(d))),
y=c(y1,y2,d$y)),
aes(x=y,group=component,colour=component))+
geom_density()
## Draw a burnin sample
library(bmixlm)
fit <- bmixlm(y~a+b+c,y~c+d+e,~f+g,data=d,nsamp=100)
## Traceplots
plot(fit,which="comp1")
plot(fit,which="comp2")
plot(fit,which="probit")
plot(fit,which="error")
## Draw a larger sample
fit <- update(fit,nsamp=2000)
summary(fit)
## Traceplots
plot(fit,which="comp1")
plot(fit,which="comp2")
plot(fit,which="probit")
plot(fit,which="error")
## Fitted values, residuals, and probability of component membership
d.pr <- predictAll(fit)
head(d.pr)
## Residuals vs fitted values
d.rf <- data.frame(comp=rep(1:2,each=nrow(d.pr)),
fitted=c(d.pr$y1,d.pr$y2),
residual=c(d.pr$r1,d.pr$r2),
prob=c(1-d.pr$q,d.pr$q))
library(ggplot2)
ggplot(d.rf[order(d.rf$prob),],
aes(x=fitted,y=residual,colour=prob)) +
geom_point(size=1)+
facet_wrap(~comp,ncol=1)
cl <- classify(fit)
library(ggplot2)
ggplot(data.frame(comp=factor(ifelse(cl$q > 0.5,2,1)),
y=d$y),aes(x=y))+
geom_density()+
geom_density(mapping=aes(group=comp,colour=comp))
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(component=factor(c(b+1,rep("observed",nrow(d)))),
y=c(d$y,d$y)),
aes(x=y,group=comp,colour=comp))+
geom_density()
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(comp=factor(c(b+1,rep("observed",nrow(d)))),
y=c(d$y,d$y)),
aes(x=y,group=comp,colour=comp))+
geom_density()
## Generate 7 uniformly distributed covariates
set.seed(31)
d <- as.data.frame(matrix(runif(1000*7),1000,7))
colnames(d) <- letters[seq_along(d)]
## Generate responses from the two models
sigma <- c(0.4,0.6)
beta1 <- c(runif(1,-0.4,0.4),rnorm(3))
y1 <- model.matrix(~a+b+c,d)%*%beta1+rnorm(nrow(d),0,sigma[1])
beta2 <- c(runif(1,-0.4,0.4),rnorm(3))
y2 <- model.matrix(~c+d+e,d)%*%beta2+rnorm(nrow(d),0,sigma[2])
## Draw the observed response from one model or the other
betap <- c(0,1,-1)
p <- pnorm(model.matrix(~f+g,d)%*%betap)
b <- rbinom(nrow(d),1,p)
d$y <- ifelse(b==0,y1,y2)
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(comp=factor(c(b+1,rep("observed",nrow(d)))),
y=c(d$y,d$y)),
aes(x=y,group=comp,colour=comp))+
geom_density()
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(comp=factor(c(b+1,rep("mixture",nrow(d)))),
y=c(d$y,d$y)),
aes(x=y,group=comp,colour=comp))+
geom_density()
cl <- classify(fit)
library(ggplot2)
ggplot(data.frame(comp=factor(c(ifelse(cl$q < 0.5,"1","2"),
rep("mixture",nrow(d)))),
y=rep(d$y,2)),aes(x=y))+
geom_density()+
geom_density(mapping=aes(group=comp,colour=comp))
cl <- classify(fit)
library(ggplot2)
ggplot(data.frame(comp=factor(c(ifelse(cl$q < 0.5,"1","2"),
rep("mixture",nrow(d)))),
y=rep(d$y,2)),
aes(x=y,group=comp,colour=comp))+
geom_density()
?pairs
??bkde2
data(geyser, package="MASS")
x <- geyser$duration
est <- bkde(x, bandwidth=0.25)
plot(est, type="l")
library(KernSmooth)
data(geyser, package="MASS")
x <- geyser$duration
est <- bkde(x, bandwidth=0.25)
plot(est, type="l")
data(geyser, package="MASS")
x <- cbind(geyser$duration, geyser$waiting)
est <- bkde2D(x, bandwidth=c(0.7, 7))
contour(est$x1, est$x2, est$fhat)
persp(est$fhat)
data(geyser, package="MASS")
x <- cbind(geyser$duration, geyser$waiting)
est <- bkde2D(x
contour(est$x1, est$x2, est$fhat)
persp(est$fhat)
data(geyser, package="MASS")
x <- cbind(geyser$duration, geyser$waiting)
est <- bkde2D(x)
contour(est$x1, est$x2, est$fhat)
persp(est$fhat)
library(MASS)
attach(geyser)
plot(duration, waiting, xlim = c(0.5,6), ylim = c(40,100))
f1 <- kde2d(duration, waiting, n = 50, lims = c(0.5, 6, 40, 100))
image(f1, zlim = c(0, 0.05))
attach(geyser)
plot(duration, waiting, xlim = c(0.5,6), ylim = c(40,100))
f1 <- kde2d(duration, waiting, n = 51)
image(f1, zlim = c(0, 0.05))
attach(geyser)
plot(duration, waiting, xlim = c(0.5,6), ylim = c(40,100))
f1 <- kde2d(duration, waiting, n = 51)
contour(f1)
library(MASS)
pairs(rbind(beta1,coef(fit,which="comp1",type="samples")),
panel=function(x,y,...) {
contour(kde2d(x,y),col="grey70")
points(x[1],y[1],col="red")
})
pairs(rbind(beta1,coef(fit,which="comp1",type="samples")),
panel=function(x,y,...) {
contour(kde2d(x,y),col="grey70",add=T)
points(x[1],y[1],col="red")
})
?contour
library(MASS)
pairs(rbind(beta1,coef(fit,which="comp1",type="samples")),
panel=function(x,y,...) {
contour(kde2d(x,y),col="grey70",nlevels=5,add=T)
points(x[1],y[1],col="red")
})
pairs(rbind(coef(fit,which="comp1",type="samples"),
coef(fit,which="comp1",type="mean"),
beta1),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="comp1")
pairs(rbind(coef(fit,which="comp2",type="samples"),
coef(fit,which="comp2",type="mean"),
beta2),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="comp2")
pairs(rbind(coef(fit,which="probit",type="samples"),
coef(fit,which="probit",type="mean"),
betap),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="probit")
pairs(rbind(coef(fit,which="error",type="samples"),
coef(fit,which="error",type="mean"),
sigma),pch=16,cex=rep(c(0.7,1),c(fit$nsamp,2)),
col=rep(c(alpha("black",0.05),alpha("orange",1),alpha("red",1)),c(fit$nsamp,1,1)),
main="error")
pairs(rbind(beta1,coef(fit,which="comp1",type="samples")),
panel=function(x,y,...) {
contour(kde2d(x,y),col="grey70",nlevels=5,add=T)
points(x[1],y[1],col="red")
},
main="comp1")
names(fit)
head(cbind(fit$beta1,fit$beta2))
head(cbind(comp1=fit$beta1,comp2=fit$beta2))
head(cbind(comp1=fit$beta1,comp2=fit$beta2,deparse.level = 2)
)
head(cbind(comp1=fit$beta1,comp2=fit$beta2,deparse.level = 2))
head(cbind(comp1=fit$beta1,comp2=fit$beta2,deparse.level = 1))
head(cbind(comp1=fit$beta1,comp2=fit$beta2,deparse.level = 3))
?cbind
library(bmixlm)
head(cbind(comp1=fit$beta1,comp2=fit$beta2,deparse.level = 3))
head(cbind(comp1=fit$beta1,comp2=fit$beta2,deparse.level = 2))
head(cbind(fit$beta1,fit$beta2,fit$betap,fit$sigma))
?as.matrix
?paste
?cbind
?setNames
library(bmixlm)
library(bmixlm)
library(devtools)
use_travis()
library(bmixlm)
## Generate 7 uniformly distributed covariates
set.seed(31)
d <- as.data.frame(matrix(runif(1000*7),1000,7))
colnames(d) <- letters[seq_along(d)]
## Generate responses from the two models
sigma <- c(0.4,0.6)
beta1 <- c(runif(1,-0.4,0.4),rnorm(3))
y1 <- model.matrix(~a+b+c,d)%*%beta1+rnorm(nrow(d),0,sigma[1])
beta2 <- c(runif(1,-0.4,0.4),rnorm(3))
y2 <- model.matrix(~c+d+e,d)%*%beta2+rnorm(nrow(d),0,sigma[2])
## Draw the observed response from one model or the other
betap <- c(0,1,-1)
p <- pnorm(model.matrix(~f+g,d)%*%betap)
b <- rbinom(nrow(d),1,p)
d$y <- ifelse(b==0,y1,y2)
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(comp=factor(c(b+1,rep("mixture",nrow(d)))),
y=c(d$y,d$y)),
aes(x=y,group=comp,colour=comp))+
geom_density()
fit
library(bmixlm)
fit
knitr::opts_chunk$set(echo=TRUE,fig.width=6,fig.height=5)
## Generate 7 uniformly distributed covariates
set.seed(31)
d <- as.data.frame(matrix(runif(1000*7),1000,7))
colnames(d) <- letters[seq_along(d)]
## Generate responses from the two models
sigma <- c(0.4,0.6)
beta1 <- c(runif(1,-0.4,0.4),rnorm(3))
y1 <- model.matrix(~a+b+c,d)%*%beta1+rnorm(nrow(d),0,sigma[1])
beta2 <- c(runif(1,-0.4,0.4),rnorm(3))
y2 <- model.matrix(~c+d+e,d)%*%beta2+rnorm(nrow(d),0,sigma[2])
## Draw the observed response from one model or the other
betap <- c(0,1,-1)
p <- pnorm(model.matrix(~f+g,d)%*%betap)
b <- rbinom(nrow(d),1,p)
d$y <- ifelse(b==0,y1,y2)
## Show the two components and the mixture
library(ggplot2)
ggplot(data.frame(comp=factor(c(b+1,rep("mixture",nrow(d)))),
y=c(d$y,d$y)),
aes(x=y,group=comp,colour=comp))+
geom_density()
## Draw a burnin sample
library(bmixlm)
fit <- bmixlm(y~a+b+c,y~c+d+e,~f+g,data=d,nsamp=100)
fit
as.matrix(fit)
x <- fit
c(paste("comp1",colnames(x$beta1),sep="."),
paste("comp2",colnames(x$beta2),sep="."),
paste("probit",colnames(x$betap),sep="."),
paste("sigma",colnames(x$sigma),sep="."))
c(paste("comp1",colnames(x$beta1),sep="."),
paste("comp2",colnames(x$beta2),sep="."),
paste("probit",colnames(x$betap),sep="."),
paste("sigma",colnames(x$sigma),sep="."))
(cbind(x$beta1,x$beta2,x$betap,x$sigma)
)
cbind(x$beta1,x$beta2,x$betap,x$sigma)
nms <- c(paste("comp1",colnames(x$beta1),sep="."),
paste("comp2",colnames(x$beta2),sep="."),
paste("probit",colnames(x$betap),sep="."),
paste("sigma",colnames(x$sigma),sep="."))
nms
setNames(cbind(x$beta1,x$beta2,x$betap,x$sigma),nms)
library(bmixlm)
as.matrix(fit)
library(bmixlm)
